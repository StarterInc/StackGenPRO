package io.starter.generio.api;

import io.starter.generio.model.Category;

import io.starter.ignite.model.DataModelObject;
import io.starter.ignite.generator.IgniteException;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.json.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * A delegate to be called by the {@link CategoryApiController}}.
 * Implement this interface with a {@link org.springframework.stereotype.Service} annotated class.
 *
 CategoryApi
 ############################## DO NOT EDIT: GENERATED FILE ##############################

    Generated by Starter Ignite: http://starter.io/ignite
    Powered by Swagger Codegen: http://swagger.io
    
    Template file: JavaSpring/apiDelegate.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-30T12:20:21.685-08:00")

@EnableWebMvc
public interface CategoryApiDelegate {

    Logger log = LoggerFactory.getLogger(CategoryApiDelegate.class);

    ObjectMapper getObjectMapper();
    
    HttpServletRequest getHttpServletRequest();

    String getAcceptHeader();
    
   
    // Starter Ignite Persistence methods
    
    public void setId(Long idVal);
    
    public int insert();
    
    public int update();

    public int delete();
    
    public String toJSON();
    
    public void setBean(Object o);
    
    public Object getBean();
    
    public List<CategoryApiDelegate> list();
    
    public CategoryApiDelegate load();
    
	// End Starter Ignite Persistence methods
    

    /**
     * Dispatch the request to the delegate data object method and handle response
     *
     * @see CategoryApi#delete
     */
    default ResponseEntity<Void> delete( Integer  param) {
        if(getObjectMapper() != null && getAcceptHeader() != null) {    
            
	        // delete();  - Category
			try {
				Object ret = callMethod("delete", param);
				if (ret != null) {
					if (ret instanceof List) {
						return 
						(ResponseEntity<Void>) getResponse((List<?>) ret);
					} else {
						return 
						(ResponseEntity<Void>) getResponse((Object) ret);
					}
				} else {
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
			} catch (Exception e) {
				log.error("Failure running method CategoryApi.delete: "
						+ e);
				return new ResponseEntity<>(HttpStatus.  INTERNAL_SERVER_ERROR);
			}
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CategoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    /**
     * Dispatch the request to the delegate data object method and handle response
     *
     * @see CategoryApi#insert
     */
    default ResponseEntity<Category> insert( Category  param) {
        if(getObjectMapper() != null && getAcceptHeader() != null) {    
            
	        // insert();  - Category
			try {
				Object ret = callMethod("insert", param);
				if (ret != null) {
					if (ret instanceof List) {
						return 
						(ResponseEntity<Category>) getResponse((List<?>) ret);
					} else {
						return 
						(ResponseEntity<Category>) getResponse((Object) ret);
					}
				} else {
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
			} catch (Exception e) {
				log.error("Failure running method CategoryApi.insert: "
						+ e);
				return new ResponseEntity<>(HttpStatus.  INTERNAL_SERVER_ERROR);
			}
        // TODO: implement examples    
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CategoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    /**
     * Dispatch the request to the delegate data object method and handle response
     *
     * @see CategoryApi#list
     */
    default ResponseEntity<List<Object>> list( String  searchparam) {
        if(getObjectMapper() != null && getAcceptHeader() != null) {    
            
	        // list();  - Category
			try {
				Object ret = callMethod("list", searchparam);
				if (ret != null) {
					if (ret instanceof List) {
						return 
						(ResponseEntity<List<Object>>) getResponse((List<?>) ret);
					} else {
						return 
						(ResponseEntity<List<Object>>) getResponse((Object) ret);
					}
				} else {
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
			} catch (Exception e) {
				log.error("Failure running method CategoryApi.list: "
						+ e);
				return new ResponseEntity<>(HttpStatus.  INTERNAL_SERVER_ERROR);
			}
        // TODO: implement examples    
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CategoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    /**
     * Dispatch the request to the delegate data object method and handle response
     *
     * @see CategoryApi#load
     */
    default ResponseEntity<Object> load( Integer  param) {
        if(getObjectMapper() != null && getAcceptHeader() != null) {    
            
	        // load();  - Category
			try {
				Object ret = callMethod("load", param);
				if (ret != null) {
					if (ret instanceof List) {
						return 
						(ResponseEntity<Object>) getResponse((List<?>) ret);
					} else {
						return 
						(ResponseEntity<Object>) getResponse((Object) ret);
					}
				} else {
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
			} catch (Exception e) {
				log.error("Failure running method CategoryApi.load: "
						+ e);
				return new ResponseEntity<>(HttpStatus.  INTERNAL_SERVER_ERROR);
			}
        // TODO: implement examples    
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CategoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    /**
     * Dispatch the request to the delegate data object method and handle response
     *
     * @see CategoryApi#update
     */
    default ResponseEntity<Object> update( Integer  param,
         Category  param2) {
        if(getObjectMapper() != null && getAcceptHeader() != null) {    
            
	        // update();  - Category
			try {
				Object ret = callMethod("update", param , param2);
				if (ret != null) {
					if (ret instanceof List) {
						return 
						(ResponseEntity<Object>) getResponse((List<?>) ret);
					} else {
						return 
						(ResponseEntity<Object>) getResponse((Object) ret);
					}
				} else {
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
			} catch (Exception e) {
				log.error("Failure running method CategoryApi.update: "
						+ e);
				return new ResponseEntity<>(HttpStatus.  INTERNAL_SERVER_ERROR);
			}
        // TODO: implement examples    
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CategoryApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

	/** 
	* Handle calling the data method on the Starter Ignite Delegate
	*/
	default Object callMethod(String string, Object... args) 
		throws Exception {
		if ("update".equals(string) && args.length == 2) {
			this.setBean(args[1]);
		}
		// hande id
		try {
			Long id = Long.parseLong(args[0].toString());
			// TODO: copy vals
			setId(id);
			// TODO: implement ModelCache
		} catch (Exception e) {
			// other type NP
			setBean(args[0]);
		}

		Method method = this.getClass().getDeclaredMethod(string);
		Object rx = method.invoke(this);

		List<Object> ret = null;
		if (rx != null && "list".equals(string)) {
			// if it *is* a list, don't return empty
			if (rx instanceof List) {
				if (((List<?>) rx).size() > 0) {
					return rx;
				} else {
					return null;
				}
			} else {
				ret = new ArrayList<Object>();
				ret.add(rx);
				return ret;
			}
		}
		return rx;
	}
	
	/**
	 * handle a list result
	 * 
	 * @param rex
	 * @return
	 */
	default ResponseEntity<?> getResponse(List<?> ret) {
		if (((List) ret).size() > 0) {
			Object rx = ((List) ret).get(0);
			if (!(rx instanceof Long)) {
				// convert to list of objects
				List<Object> rex = new ArrayList<Object>();
				for (Object r : (List) ret)rex.add(r);
				return new ResponseEntity<List<Object>>(rex, HttpStatus.OK);
			} else {
				if(rx instanceof Integer){
					if ((Integer) rx > 0)
							return new ResponseEntity<>(HttpStatus.OK);
						return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
				if(rx instanceof Long){
					if ((Long) rx > 0) 
							return new ResponseEntity<>(HttpStatus.OK);
						return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
			}
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	/**
	 * handle a single result
	 * 
	 * @param ret
	 * @return
	 * @throws JsonParseException
	 * @throws JsonMappingException
	 * @throws IOException
	 */
	default ResponseEntity<?> getResponse(Object ret) throws JsonParseException, JsonMappingException, IOException {
		if (ret instanceof Integer) {
			if ((Integer) ret > 0)
				return new ResponseEntity<>(HttpStatus.OK);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		if (ret instanceof Long) {
			if ((Long) ret > 0)
				return new ResponseEntity<>(HttpStatus.OK);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		// returns single result
		JSONObject job = new JSONObject(((CategoryApiDelegate)ret).getBean());
		return new ResponseEntity<>(getObjectMapper().readValue(job.toString(), Category.class), HttpStatus.OK);
	}
		
}

/* TODO: implement examples
    if (getAcceptHeader().contains("")) {
        try {
                return new ResponseEntity<>(getObjectMapper().readValue("", .class), HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
            log.error("Couldn't serialize response for content type ", e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
*/ 
